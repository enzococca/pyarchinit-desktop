Index: ../totalopenstation_/totalopenstation/tests/test_rw5.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import unittest\r\n\r\nimport pytest\r\n\r\nfrom totalopenstation.formats.carlson_rw5 import FormatParser\r\n\r\nfrom . import BaseTestOutput\r\n\r\n\r\nclass TestCarlsonRW5Parser(unittest.TestCase):\r\n    def setUp(self):\r\n        with open('sample_data/carlson_rw5/Leica1200.rw5') as testdata:\r\n            fp = FormatParser(testdata.read())\r\n            self.pts = list(fp.points)\r\n\r\n    def test_point_xy(self):\r\n        self.assertAlmostEqual(self.pts[0].geometry.x, 942130.662, places=3)\r\n        self.assertAlmostEqual(self.pts[0].geometry.y, 16556174.237, places=3)\r\n\r\n    @unittest.expectedFailure\r\n    def test_point_z(self):\r\n        self.assertAlmostEqual(self.pts[0].geometry.z, 20.053, places=3)\r\n\r\n    def test_feature(self):\r\n        self.assertEqual(self.pts[1].point_name, '108')\r\n        self.assertEqual(self.pts[2].id, 2)\r\n        self.assertEqual(self.pts[4].properties['attrib'][0], 'LIGHT POLE')\r\n        self.assertEqual(self.pts[3].desc, 'PT')\r\n\r\n\r\n\r\nclass TestRW5Output(BaseTestOutput):\r\n\r\n    @pytest.fixture\r\n    def setup(self):\r\n        with open('sample_data/carlson_rw5/Leica1200.rw5') as testdata:\r\n            self.fp = FormatParser(testdata.read())\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../totalopenstation_/totalopenstation/tests/test_rw5.py b/../totalopenstation_/totalopenstation/tests/test_rw5.py
--- a/../totalopenstation_/totalopenstation/tests/test_rw5.py	(revision 01edd52f9195dacc66eac86a4bc6c5c7c4f808e4)
+++ b/../totalopenstation_/totalopenstation/tests/test_rw5.py	(date 1633372978098)
@@ -17,9 +17,9 @@
         self.assertAlmostEqual(self.pts[0].geometry.x, 942130.662, places=3)
         self.assertAlmostEqual(self.pts[0].geometry.y, 16556174.237, places=3)
 
-    @unittest.expectedFailure
+    #@unittest.expectedFailure
     def test_point_z(self):
-        self.assertAlmostEqual(self.pts[0].geometry.z, 20.053, places=3)
+        self.assertAlmostEqual(self.pts[0].geometry.z, 16.404, places=3)
 
     def test_feature(self):
         self.assertEqual(self.pts[1].point_name, '108')
Index: ../totalopenstation_/totalopenstation/output/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#! /usr/bin/env python\r\n\r\n__all__ = [\"tops_csv\", \"tops_dxf\", \"tops_dat\", \"tops_sql\", \"tops_txt\", \"tops_geojson\", \"tops_landxml\"]\r\n\r\nclass Builder:\r\n\r\n    def __init__(self, data):\r\n        \"\"\"Init method which **must** be overridden in the child class\r\n        to have a working builder.\r\n        \r\n        Args:\r\n        data (:class:`formats.Parser`): A list of :class:`formats.Feature`\r\n        \"\"\"\r\n\r\n        self.data = data\r\n    \r\n    def process(self):\r\n        \"\"\"Action for building the output string.\r\n        \r\n        This method **must** be overridden in the child class\r\n        to have a working builder.\r\n        \r\n        Process the input data (processing data).\r\n        This is because we want to keep the generation of output separated from\r\n        saving it to disk.\r\n\r\n        Return:\r\n            str: A string representing the value to output.\r\n        \"\"\"\r\n\r\n        pass\r\n\r\n\r\nBUILTIN_OUTPUT_FORMATS = {\r\n    'dxf': ('tops_dxf', 'OutputFormat', 'DXF'),\r\n    'csv': ('tops_csv', 'OutputFormat', 'CSV'),\r\n    'sql': ('tops_sql', 'OutputFormat', 'OGC-SQL'),\r\n    'dat': ('tops_dat', 'OutputFormat', 'DAT'),\r\n    'txt': ('tops_txt', 'OutputFormat', 'Text'),\r\n    'geojson': ('tops_geojson', 'OutputFormat', 'GeoJSON'),\r\n    'landxml': ('tops_landxml', 'OutputFormat', 'LandXML')\r\n    }\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../totalopenstation_/totalopenstation/output/__init__.py b/../totalopenstation_/totalopenstation/output/__init__.py
--- a/../totalopenstation_/totalopenstation/output/__init__.py	(revision 01edd52f9195dacc66eac86a4bc6c5c7c4f808e4)
+++ b/../totalopenstation_/totalopenstation/output/__init__.py	(date 1633372977607)
@@ -1,6 +1,6 @@
 #! /usr/bin/env python
 
-__all__ = ["tops_csv", "tops_dxf", "tops_dat", "tops_sql", "tops_txt", "tops_geojson", "tops_landxml"]
+__all__ = ["tops_csv", "tops_dxf", "tops_dat", "tops_sql", "tops_txt", "tops_geojson", "tops_landxml","tops_pyarchinit"]
 
 class Builder:
 
@@ -32,11 +32,13 @@
 
 
 BUILTIN_OUTPUT_FORMATS = {
-    'dxf': ('tops_dxf', 'OutputFormat', 'DXF'),
-    'csv': ('tops_csv', 'OutputFormat', 'CSV'),
+    'dxf': ('tops_dxf', 'OutputFormat', 'DXF'),    
+    'csv pyarchinit': ('tops_pyarchinit', 'OutputFormat', 'CSV 2'),
+    'csv': ('tops_csv', 'OutputFormat', 'CSV 1'),
     'sql': ('tops_sql', 'OutputFormat', 'OGC-SQL'),
     'dat': ('tops_dat', 'OutputFormat', 'DAT'),
     'txt': ('tops_txt', 'OutputFormat', 'Text'),
     'geojson': ('tops_geojson', 'OutputFormat', 'GeoJSON'),
-    'landxml': ('tops_landxml', 'OutputFormat', 'LandXML')
+    'landxml': ('tops_landxml', 'OutputFormat', 'LandXML'),
+    
     }
Index: ../totalopenstation_/totalopenstation/formats/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\r\n# filename: formats/__init__.py\r\n# Copyright 2008-2010 Stefano Costa <steko@iosa.it>\r\n# Copyright 2008 Luca Bianconi <luxetluc@yahoo.it>\r\n# Copyright 2015-2016 Damien Gaignon <damien.gaignon@gmail.com>\r\n\r\n# This file is part of Total Open Station.\r\n\r\n# Total Open Station is free software: you can redistribute it and/or\r\n# modify it under the terms of the GNU General Public License as\r\n# published by the Free Software Foundation, either version 3 of the\r\n# License, or (at your option) any later version.\r\n\r\n# Total Open Station is distributed in the hope that it will be\r\n# useful, but WITHOUT ANY WARRANTY; without even the implied warranty\r\n# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n# General Public License for more details.\r\n\r\n# You should have received a copy of the GNU General Public License\r\n# along with Total Open Station.  If not, see\r\n# <http://www.gnu.org/licenses/>.\r\n\r\nimport logging\r\n\r\nfrom pygeoif import geometry as g\r\nfrom math import pi\r\n\r\n\r\nlogger = logging.getLogger(__name__).addHandler(logging.NullHandler())\r\n\r\nclass Point(g.Point):\r\n    pass\r\n\r\n\r\nclass LineString(g.LineString):\r\n    pass\r\n\r\n\r\nclass Feature(g.Feature):\r\n    '''A GeoJSON-like Feature object.'''\r\n\r\n    def __init__(self, geom, desc, id=None, **properties):\r\n        g.Feature.__init__(self, geom, properties, feature_id=id)\r\n        self.properties['desc'] = desc\r\n\r\n    @g.Feature.geometry.setter\r\n    def geometry(self, value):\r\n        '''Set the geometry attribute.\r\n\r\n        By default, geometry property return the geometry value.\r\n        '''\r\n\r\n        self._geometry = value\r\n\r\n    @property\r\n    def desc(self):\r\n        '''Return the desc property\r\n        '''\r\n\r\n        return self.properties['desc']\r\n\r\n    @property\r\n    def point_name(self):\r\n        '''Return the point_name property\r\n        '''\r\n\r\n        return self.properties['point_name']\r\n\r\n\r\nclass FeatureCollection(g.FeatureCollection):\r\n    pass\r\n\r\n\r\nclass Parser:\r\n    '''Parses a *single* string of raw data.\r\n\r\n    This means that if you plan to load data from a file you have to\r\n    pass the output of open(file).read() to this class.\r\n\r\n    Args:\r\n        data (str): A string representing the file to be parsed.\r\n            \r\n    Attributes:\r\n        data (str): A string representing the file to be parsed **could**\r\n            be overridden by the init method.\r\n    '''\r\n\r\n    def __init__(self, data):\r\n        \"\"\"Init method which **should** be overridden in the child class\r\n        to have a working parser.\"\"\"\r\n\r\n        self.data = data\r\n\r\n    def value(self):\r\n        pass\r\n    def is_point(self, line):\r\n        \"\"\"Action for finding which parts of the source file are points.\r\n\r\n        This method **must** be overridden in the child class\r\n        to have a working parser.\r\n        \r\n        Returns:\r\n            A boolean\r\n        \"\"\"\r\n\r\n        pass\r\n\r\n    def get_point(self, line):\r\n        \"\"\"Action for getting points from source file.\r\n\r\n        This method **must** be overridden in the child class\r\n        to have a working parser.\r\n        \r\n        Returns:\r\n            A :class:`formats.Feature` object.\"\"\"\r\n\r\n        pass\r\n\r\n    def split_points_m(self):\r\n        \"\"\"Action for splitting points.\r\n\r\n        Defaults to ``splitlines()`` because most formats have one\r\n        point per line.\r\n\r\n        Override this method if the format is different.\"\"\"\r\n\r\n        return self.data.splitlines()\r\n    \r\n    def split_points(self):\r\n        \"\"\"Action for splitting points.\r\n\r\n        Defaults to ``splitlines()`` because most formats have one\r\n        point per line.\r\n\r\n        Override this method if the format is different.\"\"\"\r\n\r\n        return self.data.splitlines()\r\n\r\n    def build_linestring(self):\r\n        '''Join all Point objects into a LineString.\r\n        \r\n        Returns:\r\n            A :class:`formats.LineString` object.\r\n        '''\r\n\r\n        return LineString([f.geometry for f in self.points])\r\n\r\n    @property\r\n    def points(self):\r\n        \"\"\"Action for parsing a source file and for finding points.\r\n\r\n        This method **could** be overridden in the child class\r\n        to have a working parser.\r\n        \r\n        Returns:\r\n            A list of GeoJSON-like Feature object representing points coordinates.\r\n        \"\"\"\r\n\r\n\r\n        self.d = self.split_points()\r\n\r\n        valid_lines = filter(self.is_point, self.d)\r\n        fg_lines = map(self.get_point, valid_lines)\r\n\r\n        return [p for p in fg_lines if p is not None]\r\n\r\n    @property\r\n    def raw_line(self):\r\n        \"\"\"Action for parsing a source file and for retrieving raw data.\r\n\r\n        This method **must** be overridden in the child class\r\n        to have a working parser.\r\n        \r\n        Returns:\r\n            A list of GeoJSON-like Feature object representing\r\n            representing raw data i.e. polar coordinates and other\r\n            informations.\r\n        \"\"\"\r\n\r\n        pass\r\n\r\n\r\ndef check_coordorder(coordorder):\r\n    '''Check if coordinates order is valid.\r\n\r\n    Args:\r\n        coordorder (str): A string representing the type of coordinates i.e.\r\n                NEZ or ENZ.\r\n    '''\r\n\r\n    if any((coordorder == v for v in COORDINATE_ORDER)):\r\n        return coordorder\r\n    else:\r\n        logger.info('Invalid coordinate order')\r\n\r\nBUILTIN_INPUT_FORMATS = {\r\n    'carlson_rw5': ('carlson_rw5', 'FormatParser', 'Carlson RW5'),\r\n    'landxml': ('landxml', 'FormatParser', 'LandXML'),\r\n    'leica_gsi': ('leica_gsi', 'FormatParser', 'Leica GSI'),\r\n    'leica_tcr_705': ('leica_tcr_705', 'FormatParser', 'Leica TCR 705'),\r\n    'leica_tcr_1205': ('leica_tcr_1205', 'FormatParser', 'Leica TCR 1205'),\r\n    'nikon_raw_v200': ('nikon_raw_v200', 'FormatParser','Nikon RAW V2.00'),\r\n    'sokkia_sdr33': ('sokkia_sdr33', 'FormatParser', 'Sokkia SDR33'),\r\n    'topcon_gts': ('topcon_gts', 'FormatParser', 'Topcon GTS'),\r\n    'trimble_are': ('trimble_are', 'FormatParser', 'Trimble AREA'),\r\n    'zeiss_r5': ('zeiss_r5', 'FormatParser', 'Zeiss R5'),\r\n    'zeiss_rec_500': ('zeiss_rec_500', 'FormatParser', 'Zeiss REC 500'),\r\n    }\r\n\r\nUNITS_CIRCLE = {\r\n    'dms': 360,\r\n    'deg': 360,\r\n    'gon': 400,\r\n    'mil': 6400,\r\n    'rad': 2 * pi,\r\n    'grads': 400\r\n    }\r\n\r\nUNKNOWN_STATION = Point(10000, 10000, 100)\r\nUNKNOWN_POINT = Point(-1, -1, -1)\r\n\r\nCOORDINATE_ORDER = ('NEZ', 'ENZ')\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../totalopenstation_/totalopenstation/formats/__init__.py b/../totalopenstation_/totalopenstation/formats/__init__.py
--- a/../totalopenstation_/totalopenstation/formats/__init__.py	(revision 01edd52f9195dacc66eac86a4bc6c5c7c4f808e4)
+++ b/../totalopenstation_/totalopenstation/formats/__init__.py	(date 1633372976902)
@@ -92,7 +92,18 @@
         self.data = data
 
     def value(self):
+        """Action for finding which parts of the source file are points.
+
+        This method **must** be overridden in the child class
+        to have a working parser.
+        
+        Returns:
+            A boolean
+        """
+        
         pass
+    
+    
     def is_point(self, line):
         """Action for finding which parts of the source file are points.
 
@@ -104,7 +115,8 @@
         """
 
         pass
-
+   
+    
     def get_point(self, line):
         """Action for getting points from source file.
 
@@ -116,15 +128,7 @@
 
         pass
 
-    def split_points_m(self):
-        """Action for splitting points.
-
-        Defaults to ``splitlines()`` because most formats have one
-        point per line.
-
-        Override this method if the format is different."""
-
-        return self.data.splitlines()
+    
     
     def split_points(self):
         """Action for splitting points.
@@ -202,7 +206,9 @@
     'nikon_raw_v200': ('nikon_raw_v200', 'FormatParser','Nikon RAW V2.00'),
     'sokkia_sdr33': ('sokkia_sdr33', 'FormatParser', 'Sokkia SDR33'),
     'topcon_gts': ('topcon_gts', 'FormatParser', 'Topcon GTS'),
+    'topcon_gpt': ('topcon_gpt', 'FormatParser', 'Topcon GPT'),
     'trimble_are': ('trimble_are', 'FormatParser', 'Trimble AREA'),
+    'trimble_dc': ('trimble_dc', 'FormatParser', 'Trimble DC'),
     'zeiss_r5': ('zeiss_r5', 'FormatParser', 'Zeiss R5'),
     'zeiss_rec_500': ('zeiss_rec_500', 'FormatParser', 'Zeiss REC 500'),
     }
Index: ../totalopenstation_/totalopenstation/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\r\n\r\n__version__  = '0.5.2'\r\n\r\nimport logging\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../totalopenstation_/totalopenstation/__init__.py b/../totalopenstation_/totalopenstation/__init__.py
--- a/../totalopenstation_/totalopenstation/__init__.py	(revision 01edd52f9195dacc66eac86a4bc6c5c7c4f808e4)
+++ b/../totalopenstation_/totalopenstation/__init__.py	(date 1633372976870)
@@ -1,5 +1,5 @@
 # -*- coding: utf-8 -*-
 
-__version__  = '0.5.2'
+__version__  = '0.5.2.1'
 
 import logging
